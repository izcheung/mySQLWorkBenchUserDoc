{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>In this user documentation, we will be using MySQL WorkBench, an integrated development environment (IDE) for MySQL to systematically guide users through the process of writing commonly-used SQL statements. Our objective is to provide a clear and concise tutorial on how to write SQL commands, equipping developers with the necessary skills to manage databases efficiently within MySQL Workbench.</p>"},{"location":"#background","title":"Background","text":"<p>Structured Query Language (SQL) is a programming language that provides a set of commands that allow users to manage and manipulate relational databases. MySQL is a popular relational database management system (RDBMS) that implements the SQL language. Some of the operations that a user can do include querying, updating, inserting, and deleting data from tables. </p>"},{"location":"#intended-users","title":"Intended Users","text":"<p>This documentation is targeted towards the following users:</p> <ul> <li>Beginner-level developers who needs a step-by-step guide on writing SQL commands.</li> <li>Analysts requiring SQL for conducting data processing tasks.</li> </ul>"},{"location":"#prerequisite-knowledge","title":"Prerequisite Knowledge","text":"<p>This guide assumes that you have the following:</p> <ul> <li>Introductory knowledge of MySQL - know how to connect to a MySQL server and how to run commands</li> <li>Introductory knowledge of SQL - know the fundamentals such as SQL datatypes</li> </ul>"},{"location":"#software-requirements","title":"Software Requirements","text":"<p>Please ensure you have the following before proceeding with the guide:</p> <ul> <li>Operating System (OS): MacOS or Windows</li> <li>Relational Database Management System (RDBMS): MySQL</li> <li>Integrated Development Environment (IDE): MySQL WorkBench</li> </ul>"},{"location":"#procedures-overview","title":"Procedures Overview","text":"<p>The three primary tasks utilizing SQL operations covered in this guide includes:</p> <ul> <li>Manage a TABLE</li> <li>Join tables into a VIEW</li> <li>Create and drop a TRIGGER</li> </ul>"},{"location":"#mysql-workbench-layout","title":"MySQL WorkBench Layout","text":"<p>The following screenshot shows the areas of MySQL WorkBench that we will be referring to:</p> <p></p>"},{"location":"#typographical-conventions","title":"Typographical Conventions","text":"<p>Throughout this user documentation, we will use the following layout and elements to provide relevant information.</p>"},{"location":"#placeholder","title":"Placeholder","text":"<ul> <li>Whenever you see <code>&lt; Placeholder &gt;</code>, please replace this with your own information. </li> <li><code>...</code> Means there can be a variable number of elements.</li> </ul>"},{"location":"#code-block","title":"Code Block","text":"<pre><code>This is a code block that contains the code you should input into your query window \n</code></pre>"},{"location":"#additional-information","title":"Additional information","text":"<p>This provides additional information.</p>"},{"location":"#admonitions","title":"Admonitions","text":"<p>Warning</p> <p>Specifies an action that requires caution before proceeding.</p> <p>Note</p> <p>Includes important reminder.</p> <p>Success</p> <p>Provides an image showing what should be expected.</p>"},{"location":"glossary/","title":"Glossary","text":"Term Description data integrity The accuracy and reliability of the data. database A structured collection of data. event A set occurance that triggers the execution of one or more database operations or tasks. foreign key A column or set of columns that establishes a relationship with the primary key of another table. join An action to combine two or more tables into a new table. log A chronologically ordered record of information. log table A table that stores log data. referential relationship Describes how data in one table relate to another table. relational database management system (RDBMS) A software system that allows the creation, management, and administration of relational databases. table A collection of related data organized into rows and columns. SQL A programming language used for managing and manipulating data within a relational database system. MySQL A relational database management system that uses Structured Query language (SQL) to access and manipulate databases. MySQLWorkBench An administration tool that uses SQL in its program to manage relational databases. trigger A database object that automatically executes a set of actions in response to certain events such as an data insert. view A representation of a subset of the data stored in the tables aimed at simplifying complex queries."},{"location":"task1/","title":"Manage a TABLE","text":""},{"location":"task1/#overview","title":"Overview","text":"<p>SQL is the most commonly used programming language when managing relational database. In relational databases, all data are organized into tables, which are structured collections of rows and columns. Therefore, it is important to first learn the basis of how to manage relational databases, which includes tasks such as creating, inserting, deleting, and dropping tables.</p>"},{"location":"task1/#set-up-a-database","title":"Set up a database","text":"<p>Before getting started, we will need to create a database to store tables.</p> <ol> <li> <p>Open MySQL WorkBench.</p> </li> <li> <p>Connect to a MySQL server.</p> </li> <li> <p>Open a new query tab under 'File' and then click on 'New Query Tab'.</p> </li> <li> <p>To create a new database, execute the following code in the query window: </p> <pre><code>CREATE DATABASE &lt;DatabaseName&gt;;    \n</code></pre> <p><code>CREATE DATABASE</code> intializes a new database in the SQL server.</p> </li> <li> <p>Click the refresh button to see your database appear on the schema pane:</p> <p>Success</p> <p></p> </li> <li> <p>After creating the database, specify you want to use that database by running the following command: <pre><code>USE &lt;DatabaseName&gt;;\n</code></pre></p> <p>The <code>USE</code> statement selects an existing database and directs the following SQL queries to operate within that database. </p> <p>After running this query, you should see a green checkmark in the action output. Moving forward, every successful query should return a green checkmark:</p> <p>Success</p> <p></p> </li> </ol>"},{"location":"task1/#create-a-table","title":"Create a table","text":"<p>Once you have created a database, you can create and put a new table inside the database. </p> <ol> <li> <p>Run the command below to create a table: <pre><code>CREATE TABLE &lt;TableName&gt;        \n(&lt;ColumnName&gt; DATATYPE,         \n &lt;ColumnName&gt; DATATYPE,         \n &lt;ColumnName&gt; DATATYPE, ...);\n</code></pre></p> <p>The <code>CREATE TABLE</code> command creates a new table in a relational database. </p> </li> <li> <p>Click the refresh button to see your new table under your database in the schema pane:</p> <p>Success</p> <p></p> </li> </ol>"},{"location":"task1/#insert-a-tuple-into-a-table","title":"Insert a tuple into a table","text":"<p>After creating a table, you can populate the table with data.</p> <ol> <li> <p>Run the following command to insert a tuple into a table: <pre><code>INSERT INTO &lt;TableName&gt; (&lt;ColumnName1&gt;, &lt;ColumnName2&gt;, &lt;ColumnName3&gt;, ...) \nVALUES (&lt;Value1&gt;, &lt;Value2&gt;, &lt;Value3&gt;, ...); \n</code></pre></p> <p>The <code>INSERT INTO</code> command is used to specify the name of the table you are inserting into. </p> <p><code>VALUES</code> specifies the list of values that corresponding to the respective columns listed above.</p> <p>Note</p> <p>Make sure you insert values into the columns with the correct datatype.</p> </li> <li> <p>Verify that the insertion was made correctly by running the command below. We will refer to this command many times for verifying that the correct changes have been made:</p> <pre><code>SELECT * FROM &lt;TableName&gt;;\n</code></pre> <p>The <code>SELECT</code> command chooses which columns to include in the returned table. </p> <p>The <code>*</code> symbol means to include all records. </p> <p><code>FROM</code> command tells SQL which table to query from.</p> <p>At this point, you should see your table similar to the example below:</p> <p>Success</p> <p></p> </li> </ol>"},{"location":"task1/#update-a-table-record","title":"Update a table record","text":"<ol> <li> <p>In the scenario that you wish to make a change to a record, you can run the following command: <pre><code>UPDATE &lt;TableName&gt;\nSET &lt;ColumnName&gt; = &lt;New Value&gt;, ...\nWHERE &lt;ColumnName&gt; = &lt;Value&gt;;\n</code></pre></p> <p>The <code>UPDATE</code> keyword indicates that you would like to make changes to an existing table. </p> <p>The <code>SET</code> keyword specifies which column you wish to change. </p> <p>The <code>WHERE</code> keyword is used to extract only the records that fulfill the specified condition.</p> <p>Note</p> <p>If you encounter an error Error code 1175, disable safe update mode by referring to the troubleshoot guide.</p> </li> <li> <p>Verify that the correct update was made by running the same command in step 2 of 'Insert a tuple into a table'. You should see the new changes in the updated table:</p> <p>Success</p> <p></p> </li> </ol>"},{"location":"task1/#delete-a-table-record","title":"Delete a table record","text":"<ol> <li> <p>In order to delete a table record, run the following command: <pre><code>DELETE FROM &lt;TableName&gt;\nWHERE &lt;condition&gt;;\n</code></pre></p> <p>The <code>DELETE FROM</code> keyword specifies which table you would like to delete records from. </p> <p>The <code>WHERE</code> clause specifies the conditions that must be met before the record is deleted.</p> <p>Warning</p> <p>If you use the DELETE FROM clause without using in junction with the WHERE clause, all the rows in the table will be deleted.</p> </li> <li> <p>Verify the correct deletion was made by running the same command in step 2 of 'Insert a tuple into a table'. You should see that the record has been deleted:</p> <p>Success</p> <p></p> </li> </ol>"},{"location":"task1/#drop-a-sql-table","title":"Drop a SQL table","text":"<p>Finally, We will go over how to drop an entire SQL table. </p> <ol> <li> <p>Run the following command to drop an entire table: <pre><code>DROP TABLE &lt;TableName&gt;;\n</code></pre></p> <p>The <code>DROP TABLE</code> keyword specifies which table you would like to drop.</p> <p>You should see the table disappear from the schema pane when it is successfully dropped:</p> <p>Success</p> <p></p> </li> </ol>"},{"location":"task1/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you will have learned the following:</p> <ul> <li> Understanding what SQL is and how its applied</li> <li> Setting up a database</li> <li> Creating a SQL table</li> <li> Inserting a tuple into a table</li> <li> Updating a table record</li> <li> Deleting a table record</li> <li> Dropping SQL table</li> </ul>"},{"location":"task2/","title":"Join tables into a VIEW","text":""},{"location":"task2/#overview","title":"Overview","text":"<p>Understanding how to join tables is crucial for effectively managing a relational database where data resides across multiple tables. A view in a database serves as a virtual table, formed by a query that selects data from multiple sources. This virtual table can be saved for future reference, making views invaluable for data analysis and reporting by providing access to combined data without the need for data duplication.</p>"},{"location":"task2/#set-up-tables-for-joining","title":"Set up tables for joining","text":"<p>Before getting started, ensure that the tables we plan on joining are all created. </p> <ol> <li> <p>Follow instructions in Create a TABLE to create some tables and insert data into them.</p> <p>Note</p> <p>We need a minimum of two tables to join tables in MySQL. Ensure that these two tables have one column that shares identical data.</p> </li> </ol>"},{"location":"task2/#combine-multiple-tables","title":"Combine multiple tables","text":"<p>After preparing multiple tables for joining, you need to decide how to join them. We will cover two of the most common types of SQL joins, INNER JOIN and LEFT JOIN. INNER JOIN retrieves only rows with matching values in both tables, emphasizing their commonalities. LEFT JOIN includes all rows from the left table, filling in non-matching right table rows with NULL values.</p>"},{"location":"task2/#inner-join","title":"INNER JOIN","text":"<ol> <li> <p>Execute the command below to perform inner join on two tables:     <pre><code>SELECT &lt;TableName1&gt;.&lt;ColumnName&gt;, &lt;TableName2&gt;.&lt;ColumnName&gt;, ...  \nFROM &lt;TableName1&gt;\nINNER JOIN &lt;TableName2&gt;\nON &lt;TableName1&gt;.&lt;CommonColumnName&gt; = &lt;TableName2&gt;.&lt;CommonColumnName&gt;, ...;\n</code></pre></p> <p>The <code>INNER JOIN</code> keyword combines rows from two or more tables based on a related column between them. </p> <p>The <code>ON</code> clause defines the condition to match columns between joined tables, determining the rows to combine.</p> <p>At this point, you should see the combined table in the output box:</p> <p>Success</p> <p></p> </li> <li> <p>Verify that the combined table was merged correctly by cross checking the result. </p> <p>The row count in the combined table should only contain rows where there is a match in both tables. Additionally, confirm that all desired columns are present in the combined table.</p> </li> </ol>"},{"location":"task2/#left-join","title":"LEFT JOIN","text":"<ol> <li> <p>Execute the command below to perform inner join on two tables:     <pre><code>SELECT &lt;TableName1&gt;.&lt;ColumnName&gt;, &lt;TableName2&gt;.&lt;ColumnName&gt;, ...    \nFROM &lt;TableName1&gt;\nLEFT JOIN &lt;TableName2&gt;\nON &lt;TableName1&gt;.&lt;CommonColumnName&gt; = &lt;TableName2&gt;.&lt;CommonColumnName&gt;, ...;\n</code></pre></p> <p>The <code>LEFT JOIN</code> keyword merges all left table records with matching records in right table, filling non-matches with NULL.</p> <p>At this point, you should see the combined table in the output box: </p> <p>Success</p> <p></p> </li> <li> <p>Verify that the combined table was merged correctly by cross checking the result. </p> <p>The row count in the combined table should match the total rows in table <code>&lt;TableName1&gt;</code>. Additionally, confirm that all desired columns are present in the combined table.</p> </li> </ol>"},{"location":"task2/#create-a-view","title":"Create a view","text":"<p>After you combined data from multiple tables, you will need to create a view for the combined data for future reference. </p> <ol> <li> <p>Execute the command below to create a view:     <pre><code>CREATE VIEW &lt;ViewName&gt; \nAS &lt;Query&gt;;                     \n</code></pre>     In the command provided, replace <code>&lt;Query&gt;</code> with the join query you wrote in the previous step (either the INNER JOIN or the LEFT JOIN). </p> <p>The <code>CREATE VIEW</code> statement allows you to store the result of a complex query as a virtual table.</p> <p>The <code>AS</code> clause defines the query that populates the view.</p> </li> <li> <p>Verify that the correct table was made by running the following command:     <pre><code>SELECT * FROM &lt;ViewName&gt;;       \n</code></pre></p> </li> <li> <p>Click the refresh button to see your view appear on the schema pane and make sure the query results match those from the join query in the Combine multiple tables section:</p> <p>Success</p> <p></p> </li> <li> <p>Follow instructions in Update a table record to update a record in one of the original tables. </p> </li> <li> <p>Refer to step 2 in this section to verify that the view's content has indeed been updated to mirror the changes made to the original table. Observe how the view automatically updates to reflect these changes, showcasing its dynamic connection to the source data:</p> <p>Success</p> <p></p> </li> </ol>"},{"location":"task2/#drop-a-view","title":"Drop a view","text":"<p>Finally, We will go over how to drop the view. </p> <ol> <li> <p>Execute the following command to drop the view in database:     <pre><code>DROP VIEW &lt;ViewName&gt;;\n</code></pre></p> <p>The <code>DROP VIEW</code> statement is used to remove an existing view from the database without impacting its source tables.</p> <p>You should see the view disappear from the schema pane when it is successfully dropped:</p> <p>Success</p> <p></p> </li> </ol>"},{"location":"task2/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you have gained knowledge on the following tasks:</p> <ul> <li> Understanding the purpose and utility of joining tables</li> <li> Creating a view from joined tables</li> <li> Combining two tables with INNER JOIN</li> <li> Comining two tables with LEFT JOIN</li> <li> Dropping a view</li> </ul>"},{"location":"task3/","title":"Create and drop a TRIGGER","text":""},{"location":"task3/#overview","title":"Overview","text":"<p>Triggers are special types of stored procedures that automatically executes or fires in response to certain events on a table or view in a database. Understanding how to create and manage triggers is essential for implementing complex business logic directly on the database level to ensure data integrity. It is also used to automate tasks such as auditing changes, enforcing constraints, or updating related tables. </p>"},{"location":"task3/#set-up-tables-for-adding-a-trigger","title":"Set up tables for adding a trigger","text":"<p>Before you create a trigger, it is important to set up your tables properly.</p> <ol> <li>Follow instructions in Create a TABLE to create some tables and insert data into them.</li> </ol>"},{"location":"task3/#create-a-trigger","title":"Create a trigger","text":"<p>Creating a trigger involves specifying the timing (<code>BEFORE</code> or <code>AFTER</code> the event), the event (<code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code>) that triggers it, and the operations to be performed. We will cover two of the most common types of SQL triggers: BEFORE INSERT and AFTER INSERT.</p>"},{"location":"task3/#before-insert","title":"BEFORE INSERT","text":"<p>The BEFORE INSERT trigger is set up to automatically run special checks or tasks right before a new entry is added to a database table. This ensures that any data being added follows specific rules we've set in the trigger, maintaining consistency and quality.</p> <ol> <li> <p>Execute the command below to create a trigger:     <pre><code>CREATE TRIGGER &lt;TriggerName&gt;\nBEFORE INSERT ON &lt;TableName&gt;\nFOR EACH ROW\n-- Trigger logic goes here\n</code></pre>     An example of the <code>Trigger logic</code> could be:     <pre><code>SET NEW.&lt;ColumnName&gt; = LOWER(NEW.&lt;ColumnName&gt;);\n</code></pre></p> <p>The <code>CREATE TRIGGER</code> clause initiates an automatic action in response to specific events on a table or view. </p> <p>The <code>BEFORE INSERT</code> clause triggers actions to occur before a new record is inserted into the table.</p> <p>The <code>FOR EACH ROW</code> clause specifies that the trigger operates on each row affected by the event individually.</p> <p>The <code>SET</code> keyword is used within triggers to assign new values to specific columns or variables.</p> <p>The <code>NEW</code> keyword refers to the new row data in insert or update operations.</p> <p>The <code>LOWER</code> clause calls a function that converts text to lowercase.</p> </li> <li> <p>Click the refresh button to see your trigger appear on the schema pane:</p> <p>Success</p> <p></p> </li> <li> <p>Verify the trigger by performing the action it is designed to respond to.</p> <p>For example, after setting up a <code>BEFORE INSERT</code> trigger which converts a column's data to lowercase before insertion, you can test the trigger's functionality by attempting to insert a record into the designated table using uppercase letters in the targeted column. Execute the following command to observe the trigger in action: <pre><code>INSERT INTO &lt;TableName&gt; (&lt;ColumnName&gt;, ...)\nVALUES ('UPPERCASE Value', ...);\n</code></pre></p> </li> <li> <p>Verify that the correct data has been inserted by running the following command for the table updated in step 2:     <pre><code>SELECT * FROM &lt;TableName&gt;;\n</code></pre></p> <p>Success</p> <p></p> </li> </ol>"},{"location":"task3/#after-insert","title":"AFTER INSERT","text":"<p>The AFTER INSERT trigger is designed to perform certain actions or validations right after a new entry has been successfully added to a database table. This allows for further processing of the newly inserted data, such as updating related records or logging changes, ensuring that our data handling meets established criteria.</p> <ol> <li> <p>Execute the command below to create a trigger:     <pre><code>CREATE TRIGGER &lt;TriggerName&gt;\nAFTER INSERT ON &lt;TableName&gt;\nFOR EACH ROW\n-- Trigger logic goes here\n</code></pre></p> <p>An example of trigger logic could be: <pre><code>INSERT INTO &lt;LogTableName&gt; (&lt;ForeignKeyColumn&gt;, &lt;TimestampColumn&gt;)\nVALUES (NEW.&lt;ForeignKeyValue&gt;, NOW());\n</code></pre></p> <p>The <code>AFTER INSERT</code> keyword triggers actions following a successful record insertion.</p> <p>Note</p> <p>For this example, ensure you have created a log table named <code>&lt;LogTableName&gt;</code> alongside your main table <code>&lt;TableName&gt;</code>. For guidance on creating a new table, please refer to Create a TABLE.</p> <p>A log table in MySQL records changes or events that occur within the database, providing a historical record of transactions, system activities, or errors for monitoring, auditing, and troubleshooting purposes.</p> </li> <li> <p>Click the refresh button to see your trigger appear on the schema pane:</p> <p>Success</p> <p></p> </li> <li> <p>Verify the trigger by performing the action it is designed to respond to.</p> <p>For example, after setting up a <code>AFTER INSERT</code> trigger which logs a record in the log table after insertion, you can test the trigger's functionality by attempting to insert a record into the designated table and note the change in the log table. Execute the following command to observe the trigger in action: <pre><code>INSERT INTO &lt;TableName&gt; (&lt;ColumnName&gt;, ...)\nVALUES ('anything', ...);\n</code></pre></p> </li> <li> <p>Verify that a log record has been created successfully by running the following command for the log table:     <pre><code>SELECT * FROM &lt;LogTableName&gt;;\n</code></pre></p> <p>Success</p> <p></p> </li> </ol>"},{"location":"task3/#drop-a-trigger","title":"Drop a trigger","text":"<p>Finally, We will go over how to drop the trigger. </p> <ol> <li> <p>Execute the following command to drop the trigger in database:     <pre><code>DROP TRIGGER &lt;TriggerName&gt;;\n</code></pre></p> <p>The <code>DROP TRIGGER</code> statement is used to delete an existing trigger from the database.</p> <p>You should see the trigger disappear from the schema pane when it is successfully dropped:</p> <p>Success</p> <p></p> </li> <li> <p>Repeat step 2 and 3 from BEFORE INSERT or AFTER INSERT to verify if trigger has been dropped:</p> <p>Success</p> <p></p> </li> </ol>"},{"location":"task3/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you have gained knowledge on the following tasks:</p> <ul> <li> Understanding the purpose and functionality of triggers</li> <li> Creating BEFORE INSERT triggers</li> <li> Creating AFTER INSERT triggers</li> <li> Dropping triggers</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"Issue Solution INSERT data unsuccessful Ensure that the value for any primary key is unique before insertion. You can use the <code>INSERT IGNORE</code> or <code>ON DUPLICATE KEY UPDATE</code> syntax to handle duplicates gracefully. DELETE data unsuccessful This can occur when trying to delete a row that a foreign key in another table references, without addressing the dependent data. Resolve this by setting up foreign key constraints with <code>ON DELETE CASCADE</code> for cascading deletes (be cautious as this automatically deletes dependent records). Unexpected or missing results in JOIN Ensure the join condition is correct and the appropriate join type (e.g., <code>INNER JOIN</code>, <code>LEFT JOIN</code>) is used for your query logic. Check that data types of joined fields are compatible. Adjust join type or conditions as needed to match expected results. TRIGGER does not fire Verify that the trigger is correctly defined, including correct table and event timing (<code>BEFORE</code> or <code>AFTER</code>). Ensure necessary permissions for creating and executing triggers. Denial of unsafe UPDATE / DELETE This issue arises when you perform an <code>UPDATE</code> or <code>DELETE</code> operation without a <code>WHERE</code> clause, or when your <code>WHERE</code> clause does not reference a key column. To bypass this safety feature, you can disable it by executing <code>SET SQL_SAFE_UPDATES = 0;</code>. Be mindful of the associated risks and make sure to re-enable the safety feature by setting <code>SQL_SAFE_UPDATES</code> back to <code>1</code> after completing your operation. Data Type Mismatch Validate and ensure that all data being inserted or updated matches the column's data type specifications. Use proper data conversion or casting as necessary."}]}